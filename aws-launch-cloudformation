#!/bin/bash -e
#
# Launch the Techscore application

usage() {
    >&2 echo ERROR: ${1:-unknown}
    exit 1
}

CONFIG=cloudformation.config

[[ -n "$verbose" ]] && set -x
[[ -n "$AWS_PROFILE" ]] || usage "No AWS_PROFILE setup."
[[ -f "$CONFIG" ]] || usage "No '$CONFIG' file found."

source $CONFIG
PARAMS=
AWS_ARGS=

# Order below is recommended execution order
populate-params() {
    case "$1" in
        certificates)
            PARAMS=(--parameters "ParameterKey=OrgHostname,ParameterValue=$ORG_HOSTNAME")
            AWS_ARGS=("--region=us-east-1")
            ;;

        vpc)
            PARAMS=(--parameters "ParameterKey=OrgHostname,ParameterValue=$ORG_HOSTNAME")
            ;;

        bastion-infra)
            PARAMS=(--capabilities CAPABILITY_IAM)
            ;;

        app)
            PARAMS=(
                --parameters "ParameterKey=OrgHostname,ParameterValue=$ORG_HOSTNAME"
                --capabilities CAPABILITY_IAM
            )
            ;;

        public)
            local certArn=$(aws --region=us-east-1 cloudformation list-exports --output text --query "Exports[?Name==\`ScoresCertificateArn\`].Value")
            PARAMS=(
                --parameters
                "ParameterKey=OrgHostname,ParameterValue=$ORG_HOSTNAME"
                "ParameterKey=ScoresCertificateArn,ParameterValue=$certArn"
            )
            ;;

        db)
            PARAMS=(--parameters "ParameterKey=OrgHostname,ParameterValue=$ORG_HOSTNAME")
            ;;

        autoscaling)
            if [[ -n "$KEYPAIR" ]]; then
                PARAMS=(--parameters "ParameterKey=KeyPair,ParameterValue=$KEYPAIR")
            fi
            ;;

        codedeploy)
            PARAMS=(
                --parameters "ParameterKey=OrgHostname,ParameterValue=$ORG_HOSTNAME"
                --capabilities CAPABILITY_IAM
            )
            ;;

        bastion-host)
            if [[ -n "$KEYPAIR" ]]; then
                PARAMS=(--parameters "ParameterKey=KeyPair,ParameterValue=$KEYPAIR")
            fi
            ;;

        *)
            usage "Unknown template: $1"
            ;;
    esac
}

cloudformation-verb() {
    if aws ${AWS_ARGS[@]} cloudformation describe-stacks --stack-name $1 > /dev/null 2>&1; then
        echo "update-stack"
    else
        echo "create-stack"
    fi
}

execute() {
    populate-params $1
    aws ${AWS_ARGS[@]} \
        cloudformation $(cloudformation-verb $1) \
        --stack-name $1 \
        --template-body file://techscore-$1.yml \
        ${PARAMS[@]}
}

execute $@
